[
    {
        "title": "I am Lazy So I will not upload Blog posts",
        "content": "I am Lazy So I will not upload Blog posts not any any more. I build this just for learning process./nThanks for reading this post. BTW this project is open source on github https://github.com/hellofaizan/blog. Now now to this project and make it better. Also join Discord ðŸ‘‰ https://discord.com/invite/EHthxHRUmr",
        "slug": "I am Lazy So I will not upload Blog posts"
    },
    {
        "title": "Open Source Software",
        "content": "I really do love open source. I love being able to build software that I know people will be able to make great use of. I love that we can extend already existing open source software & I love that we're able to put licenses on our code and explain where and how you can use it. But open source is a truly double-edged sword. Forever are there stories on Twitter with people explaining how they were taken advantage of, or don't have the resource to keep maintaining a project. Recently, a library called faker.js was nuked by the author in an attempt to make a \"political\" point. Wildy unsuccesful and in my opinion, extremely immature. However, the community responded really quickly and quickly forked the project into @faker-js/faker. This meant developers could easily switch their project over to use a 100% API compatible, up to date and community managed version of the project. The original author, Marak Squires, ended up deleting the original repo. As well as that, Squires also placed malicious code in another project of his, colors.js, that would infinite loop the victim's computer. But there was a reason for this. Thanks to the wonderful archive.org, we're able to see old and deleted posts explaining why this had had happened â€” and it's a common frustration within the community. Famously, Marak mentions he will do No more free work and he's also written a good few hundred words on the topic, too.",
        "slug": "Open%20Source%20Software"
    },
    {
        "title": "The 0kb Next.js blog",
        "content": "Ok so this was a little bit clickbaity, but it's not technically a lie. This entire website has a zero kilobyte bundle on every single page... except it uses no JavaScript... how can this be possible? Context Next.js is a huge abstraction of ReactDOMServer and other helpful utilities for building server side rendered apps powered by React. It's really easy to get started with, and features things like file system routing, statically generated content and much much more. I'm not trying to advertise it but I really really love it. There are a couple things to take in from the first sentence here, server side rendering and React. For those of you who are not familiar with React, it's a JavaScript framework for building user interfaces. It handles the view layer of an app and is used to render the UI. Next.js takes this a step further and allows you to write your own view layer to have the first render performed on a server, which allows for a lot of performance and UI optimizations because we can ship back a lot less to the client (foreshadowing). Runtime JS With something called the Next.js PageConfig, we can instruct Next.js to supply zero runtime JS to the client. It comes with a couple trade offs but the general idea is that we perform our first render on the server (executing JavaScript) and the resulting HTML and CSS is \"frozen\" and sent down to the client over the wire. Zero JavaScript runtime in the browser, no <script> tags in sight!",  
        "slug": "The%200kb%20Next.js%20blog"
    },
    {
        "title": "The Mistakes I Made As a Beginner Programmer",
        "content": "Let me make one thing clear first. If you are a beginner programmer, this article is not meant to make you feel bad about the mistakes that you might be making but rather to make you aware of them, teach you to spot signs of them, and remind you to avoid them. I have made these mistakes in the past and learned from each and every one of them. I am happy to have formed coding habits to help me avoid them. You should do too. These mistakes are not presented here in any particular order. 1) Writing Code Without Planning High-quality written content, in general, cannot be created easily. It requires careful thinking and research. High-quality programs are no exception. Writing quality programs is a process with a flow: Think. Research. Plan. Write. Validate. Modify. Unfortunately, there is no good acronym for this. You need to create a habit to always go through the right amount of these activities. One of the biggest mistakes I have made as a beginner programmer was to start writing code right away without much thinking and researching. While this might work for a small stand-alone application, it has a big, negative effect on larger applications. Just like you need to think before saying anything you might regret, you need to think before you code anything you might regret. Coding is also a way to communicate your thoughts. When angry, count to 10 before you speak. If very angry, a hundred. â€” Thomas Jefferson. Here is my version of that quote: When reviewing code, count to 10 before you refactor a line. If the code does not have tests, a hundred. â€” Samer Buna Programming is mostly about reading previous code, researching what is needed and how it fits within the current system, and planning the writing of features with small, testable increments. The actual writing of lines of code is probably only 10% of the whole process. Do not think about programming as writing lines of code. Programming is a logic-based creativity that needs nurturing.",
        "slug": "The Mistakes I Made As a Beginner Programmer"
    }
]